//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AwesomeParts
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using AwesomeParts.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace AwesomeParts.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using AwesomeParts.Web.Resources;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("AwesomeParts-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _email;
        
        private string _firma;
        
        private string _friendlyName;
        
        private string _imie;
        
        private string _kodPocztowy;
        
        private string _kraj;
        
        private string _miasto;
        
        private string _nazwisko;
        
        private string _nip;
        
        private string _numer;
        
        private string _telefon;
        
        private string _ulica;
        
        private Guid _userID;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFirmaChanging(string value);
        partial void OnFirmaChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnImieChanging(string value);
        partial void OnImieChanged();
        partial void OnKodPocztowyChanging(string value);
        partial void OnKodPocztowyChanged();
        partial void OnKrajChanging(string value);
        partial void OnKrajChanged();
        partial void OnMiastoChanging(string value);
        partial void OnMiastoChanged();
        partial void OnNazwiskoChanging(string value);
        partial void OnNazwiskoChanged();
        partial void OnNIPChanging(string value);
        partial void OnNIPChanged();
        partial void OnNumerChanging(string value);
        partial void OnNumerChanged();
        partial void OnTelefonChanging(string value);
        partial void OnTelefonChanged();
        partial void OnUlicaChanging(string value);
        partial void OnUlicaChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Firma' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Firma", Order=5)]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość nazwy firmy powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Firma
        {
            get
            {
                return this._firma;
            }
            set
            {
                if ((this._firma != value))
                {
                    this.OnFirmaChanging(value);
                    this.RaiseDataMemberChanging("Firma");
                    this.ValidateProperty("Firma", value);
                    this._firma = value;
                    this.RaiseDataMemberChanged("Firma");
                    this.OnFirmaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Imie' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Imię", Order=3)]
        [RegularExpression("^[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]*$", ErrorMessage="Imię może zawierać tylko litery z przediału a-z i A-Z oraz polskie znaki.")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość imienia powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Imie
        {
            get
            {
                return this._imie;
            }
            set
            {
                if ((this._imie != value))
                {
                    this.OnImieChanging(value);
                    this.RaiseDataMemberChanging("Imie");
                    this.ValidateProperty("Imie", value);
                    this._imie = value;
                    this.RaiseDataMemberChanged("Imie");
                    this.OnImieChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KodPocztowy' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Kod pocztowy", Order=9)]
        [RegularExpression("^[0-9]{2}-[0-9]{3}$", ErrorMessage="Kod pocztowy powinien być podany w formacie: xx-xxx")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(6, ErrorMessage="Długość kodu pocztowego powinna liczyć 6 znaków.", MinimumLength=6)]
        public string KodPocztowy
        {
            get
            {
                return this._kodPocztowy;
            }
            set
            {
                if ((this._kodPocztowy != value))
                {
                    this.OnKodPocztowyChanging(value);
                    this.RaiseDataMemberChanging("KodPocztowy");
                    this.ValidateProperty("KodPocztowy", value);
                    this._kodPocztowy = value;
                    this.RaiseDataMemberChanged("KodPocztowy");
                    this.OnKodPocztowyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Kraj' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Kraj", Order=11)]
        [RegularExpression("^[a-zA-Z]*$", ErrorMessage="Nazwa kraju może się składać tylko ze znaków z zakresu a-z i A-Z")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość imienia powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Kraj
        {
            get
            {
                return this._kraj;
            }
            set
            {
                if ((this._kraj != value))
                {
                    this.OnKrajChanging(value);
                    this.RaiseDataMemberChanging("Kraj");
                    this.ValidateProperty("Kraj", value);
                    this._kraj = value;
                    this.RaiseDataMemberChanged("Kraj");
                    this.OnKrajChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Miasto' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Miasto", Order=10)]
        [RegularExpression("^[a-zA-Z]*$", ErrorMessage="Nazwa miasta może zawierać tylko litery z przediału a-z i A-Z.")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość nazwy miasta powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Miasto
        {
            get
            {
                return this._miasto;
            }
            set
            {
                if ((this._miasto != value))
                {
                    this.OnMiastoChanging(value);
                    this.RaiseDataMemberChanging("Miasto");
                    this.ValidateProperty("Miasto", value);
                    this._miasto = value;
                    this.RaiseDataMemberChanged("Miasto");
                    this.OnMiastoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nazwisko' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Nazwisko", Order=4)]
        [RegularExpression("^[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]*$", ErrorMessage="Nazwisko może zawierać tylko litery z przediału a-z i A-Z oraz polskie znaki.")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość nazwiska powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Nazwisko
        {
            get
            {
                return this._nazwisko;
            }
            set
            {
                if ((this._nazwisko != value))
                {
                    this.OnNazwiskoChanging(value);
                    this.RaiseDataMemberChanging("Nazwisko");
                    this.ValidateProperty("Nazwisko", value);
                    this._nazwisko = value;
                    this.RaiseDataMemberChanged("Nazwisko");
                    this.OnNazwiskoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NIP' value.
        /// </summary>
        [DataMember()]
        [Display(Name="NIP", Order=6)]
        [RegularExpression("^(([0-9]{3}[- ][0-9]{2}[- ][0-9]{2}[- ][0-9]{3}))$", ErrorMessage="NIP powinien być podany w formacie xxx-xx-xx-xxx lub xxx xx xx xxx")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(13, ErrorMessage="Długość numeru NIP powinna liczyć 13 znaków.", MinimumLength=13)]
        public string NIP
        {
            get
            {
                return this._nip;
            }
            set
            {
                if ((this._nip != value))
                {
                    this.OnNIPChanging(value);
                    this.RaiseDataMemberChanging("NIP");
                    this.ValidateProperty("NIP", value);
                    this._nip = value;
                    this.RaiseDataMemberChanged("NIP");
                    this.OnNIPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Numer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Numer lokalu", Order=8)]
        [RegularExpression("^[0-9]*$", ErrorMessage="Numer ulicy może zawierać tylko cyfry z przediału 0-9.")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(6, ErrorMessage="Długość imienia powinna liczyć od 2 do 6 znaków.", MinimumLength=2)]
        public string Numer
        {
            get
            {
                return this._numer;
            }
            set
            {
                if ((this._numer != value))
                {
                    this.OnNumerChanging(value);
                    this.RaiseDataMemberChanging("Numer");
                    this.ValidateProperty("Numer", value);
                    this._numer = value;
                    this.RaiseDataMemberChanged("Numer");
                    this.OnNumerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Telefon' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Telefon", Order=12)]
        [RegularExpression("^[0-9]*$", ErrorMessage="Numer telefonu może zawierać tylko liczby 0-9")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość numeru telefonu nie powinna przekraczać 12 znaków.", MinimumLength=2)]
        public string Telefon
        {
            get
            {
                return this._telefon;
            }
            set
            {
                if ((this._telefon != value))
                {
                    this.OnTelefonChanging(value);
                    this.RaiseDataMemberChanging("Telefon");
                    this.ValidateProperty("Telefon", value);
                    this._telefon = value;
                    this.RaiseDataMemberChanged("Telefon");
                    this.OnTelefonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ulica' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Ulica", Order=7)]
        [RegularExpression("^[a-zA-Z]*$", ErrorMessage="Imię może zawierać tylko litery z przediału a-z i A-Z.")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość imienia powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Ulica
        {
            get
            {
                return this._ulica;
            }
            set
            {
                if ((this._ulica != value))
                {
                    this.OnUlicaChanging(value);
                    this.RaiseDataMemberChanging("Ulica");
                    this.ValidateProperty("Ulica", value);
                    this._ulica = value;
                    this.RaiseDataMemberChanged("Ulica");
                    this.OnUlicaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("AwesomeParts-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entity instances that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entity instances using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entity instances.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
namespace AwesomeParts.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using AwesomeParts.Web.Resources;
    
    
    /// <summary>
    /// The 'ProfileData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.Models")]
    public sealed partial class ProfileData : Entity
    {
        
        private string _email;
        
        private string _firma;
        
        private string _friendlyName;
        
        private int _id;
        
        private string _imie;
        
        private string _kodPocztowy;
        
        private string _kraj;
        
        private string _miasto;
        
        private string _nazwisko;
        
        private string _nip;
        
        private string _numer;
        
        private string _telefon;
        
        private string _ulica;
        
        private Guid _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFirmaChanging(string value);
        partial void OnFirmaChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnImieChanging(string value);
        partial void OnImieChanged();
        partial void OnKodPocztowyChanging(string value);
        partial void OnKodPocztowyChanged();
        partial void OnKrajChanging(string value);
        partial void OnKrajChanged();
        partial void OnMiastoChanging(string value);
        partial void OnMiastoChanged();
        partial void OnNazwiskoChanging(string value);
        partial void OnNazwiskoChanged();
        partial void OnNIPChanging(string value);
        partial void OnNIPChanged();
        partial void OnNumerChanging(string value);
        partial void OnNumerChanged();
        partial void OnTelefonChanging(string value);
        partial void OnTelefonChanged();
        partial void OnUlicaChanging(string value);
        partial void OnUlicaChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileData"/> class.
        /// </summary>
        public ProfileData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Firma' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Firma", Order=4)]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość nazwy firmy powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Firma
        {
            get
            {
                return this._firma;
            }
            set
            {
                if ((this._firma != value))
                {
                    this.OnFirmaChanging(value);
                    this.RaiseDataMemberChanging("Firma");
                    this.ValidateProperty("Firma", value);
                    this._firma = value;
                    this.RaiseDataMemberChanged("Firma");
                    this.OnFirmaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'id' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.RaiseDataMemberChanging("id");
                    this.ValidateProperty("id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("id");
                    this.OnidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Imie' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Imię", Order=2)]
        [RegularExpression("^[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]*$", ErrorMessage="Imię może zawierać tylko litery z przediału a-z i A-Z oraz polskie znaki.")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość imienia powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Imie
        {
            get
            {
                return this._imie;
            }
            set
            {
                if ((this._imie != value))
                {
                    this.OnImieChanging(value);
                    this.RaiseDataMemberChanging("Imie");
                    this.ValidateProperty("Imie", value);
                    this._imie = value;
                    this.RaiseDataMemberChanged("Imie");
                    this.OnImieChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KodPocztowy' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Kod pocztowy", Order=8)]
        [RegularExpression("^[0-9]{2}-[0-9]{3}$", ErrorMessage="Kod pocztowy powinien być podany w formacie: xx-xxx")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(6, ErrorMessage="Długość kodu pocztowego powinna liczyć 6 znaków.", MinimumLength=6)]
        public string KodPocztowy
        {
            get
            {
                return this._kodPocztowy;
            }
            set
            {
                if ((this._kodPocztowy != value))
                {
                    this.OnKodPocztowyChanging(value);
                    this.RaiseDataMemberChanging("KodPocztowy");
                    this.ValidateProperty("KodPocztowy", value);
                    this._kodPocztowy = value;
                    this.RaiseDataMemberChanged("KodPocztowy");
                    this.OnKodPocztowyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Kraj' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Kraj", Order=10)]
        [RegularExpression("^[a-zA-Z]*$", ErrorMessage="Nazwa kraju może się składać tylko ze znaków z zakresu a-z i A-Z")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość nazwy kraju powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Kraj
        {
            get
            {
                return this._kraj;
            }
            set
            {
                if ((this._kraj != value))
                {
                    this.OnKrajChanging(value);
                    this.RaiseDataMemberChanging("Kraj");
                    this.ValidateProperty("Kraj", value);
                    this._kraj = value;
                    this.RaiseDataMemberChanged("Kraj");
                    this.OnKrajChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Miasto' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Miasto", Order=9)]
        [RegularExpression("^[a-zA-Z]*$", ErrorMessage="Nazwa miasta może zawierać tylko litery z przediału a-z i A-Z.")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość nazwy miasta powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Miasto
        {
            get
            {
                return this._miasto;
            }
            set
            {
                if ((this._miasto != value))
                {
                    this.OnMiastoChanging(value);
                    this.RaiseDataMemberChanging("Miasto");
                    this.ValidateProperty("Miasto", value);
                    this._miasto = value;
                    this.RaiseDataMemberChanged("Miasto");
                    this.OnMiastoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nazwisko' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Nazwisko", Order=3)]
        [RegularExpression("^[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]*$", ErrorMessage="Nazwisko może zawierać tylko litery z przediału a-z i A-Z oraz polskie znaki.")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość nazwiska powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Nazwisko
        {
            get
            {
                return this._nazwisko;
            }
            set
            {
                if ((this._nazwisko != value))
                {
                    this.OnNazwiskoChanging(value);
                    this.RaiseDataMemberChanging("Nazwisko");
                    this.ValidateProperty("Nazwisko", value);
                    this._nazwisko = value;
                    this.RaiseDataMemberChanged("Nazwisko");
                    this.OnNazwiskoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NIP' value.
        /// </summary>
        [DataMember()]
        [Display(Name="NIP", Order=5)]
        [RegularExpression("^(([0-9]{3}[- ][0-9]{2}[- ][0-9]{2}[- ][0-9]{3}))$", ErrorMessage="NIP powinien być podany w formacie xxx-xx-xx-xxx lub xxx xx xx xxx")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(13, ErrorMessage="Długość numeru NIP powinna liczyć 13 znaków.", MinimumLength=13)]
        public string NIP
        {
            get
            {
                return this._nip;
            }
            set
            {
                if ((this._nip != value))
                {
                    this.OnNIPChanging(value);
                    this.RaiseDataMemberChanging("NIP");
                    this.ValidateProperty("NIP", value);
                    this._nip = value;
                    this.RaiseDataMemberChanged("NIP");
                    this.OnNIPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Numer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Numer lokalu", Order=7)]
        [RegularExpression("^[0-9]*$", ErrorMessage="Numer lokalu może zawierać tylko cyfry z przediału 0-9.")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(6, ErrorMessage="Nr lokalu powinien liczyć do 6 znaków.", MinimumLength=1)]
        public string Numer
        {
            get
            {
                return this._numer;
            }
            set
            {
                if ((this._numer != value))
                {
                    this.OnNumerChanging(value);
                    this.RaiseDataMemberChanging("Numer");
                    this.ValidateProperty("Numer", value);
                    this._numer = value;
                    this.RaiseDataMemberChanged("Numer");
                    this.OnNumerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Telefon' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Telefon", Order=11)]
        [RegularExpression("^[0-9]*$", ErrorMessage="Numer telefonu może zawierać tylko liczby 0-9")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(12, ErrorMessage="Długość numeru telefonu nie powinna przekraczać 12 znaków.", MinimumLength=6)]
        public string Telefon
        {
            get
            {
                return this._telefon;
            }
            set
            {
                if ((this._telefon != value))
                {
                    this.OnTelefonChanging(value);
                    this.RaiseDataMemberChanging("Telefon");
                    this.ValidateProperty("Telefon", value);
                    this._telefon = value;
                    this.RaiseDataMemberChanged("Telefon");
                    this.OnTelefonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ulica' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Ulica", Order=6)]
        [RegularExpression("^[a-zA-Z]*$", ErrorMessage="Nazwa ulicy może zawierać tylko litery z przediału a-z i A-Z.")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessage="Długość nazwy ulicy powinna liczyć od 2 do 255 znaków.", MinimumLength=2)]
        public string Ulica
        {
            get
            {
                return this._ulica;
            }
            set
            {
                if ((this._ulica != value))
                {
                    this.OnUlicaChanging(value);
                    this.RaiseDataMemberChanging("Ulica");
                    this.ValidateProperty("Ulica", value);
                    this._ulica = value;
                    this.RaiseDataMemberChanged("Ulica");
                    this.OnUlicaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaisePropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._userID;
        }
    }
}
namespace AwesomeParts.Web.POCOs
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using AwesomeParts.Web.Resources;
    
    
    /// <summary>
    /// The 'KlientPOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs")]
    public sealed partial class KlientPOCO : Entity
    {
        
        private string _email;
        
        private string _firma;
        
        private int _id;
        
        private string _imie;
        
        private string _kodPocztowy;
        
        private string _kraj;
        
        private string _miasto;
        
        private string _nazwisko;
        
        private string _nip;
        
        private string _numer;
        
        private string _telefon;
        
        private string _ulica;
        
        private Guid _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFirmaChanging(string value);
        partial void OnFirmaChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnImieChanging(string value);
        partial void OnImieChanged();
        partial void OnKodPocztowyChanging(string value);
        partial void OnKodPocztowyChanged();
        partial void OnKrajChanging(string value);
        partial void OnKrajChanged();
        partial void OnMiastoChanging(string value);
        partial void OnMiastoChanged();
        partial void OnNazwiskoChanging(string value);
        partial void OnNazwiskoChanged();
        partial void OnNIPChanging(string value);
        partial void OnNIPChanged();
        partial void OnNumerChanging(string value);
        partial void OnNumerChanged();
        partial void OnTelefonChanging(string value);
        partial void OnTelefonChanged();
        partial void OnUlicaChanging(string value);
        partial void OnUlicaChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="KlientPOCO"/> class.
        /// </summary>
        public KlientPOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Firma' value.
        /// </summary>
        [DataMember()]
        public string Firma
        {
            get
            {
                return this._firma;
            }
            set
            {
                if ((this._firma != value))
                {
                    this.OnFirmaChanging(value);
                    this.RaiseDataMemberChanging("Firma");
                    this.ValidateProperty("Firma", value);
                    this._firma = value;
                    this.RaiseDataMemberChanged("Firma");
                    this.OnFirmaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Imie' value.
        /// </summary>
        [DataMember()]
        public string Imie
        {
            get
            {
                return this._imie;
            }
            set
            {
                if ((this._imie != value))
                {
                    this.OnImieChanging(value);
                    this.RaiseDataMemberChanging("Imie");
                    this.ValidateProperty("Imie", value);
                    this._imie = value;
                    this.RaiseDataMemberChanged("Imie");
                    this.OnImieChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KodPocztowy' value.
        /// </summary>
        [DataMember()]
        public string KodPocztowy
        {
            get
            {
                return this._kodPocztowy;
            }
            set
            {
                if ((this._kodPocztowy != value))
                {
                    this.OnKodPocztowyChanging(value);
                    this.RaiseDataMemberChanging("KodPocztowy");
                    this.ValidateProperty("KodPocztowy", value);
                    this._kodPocztowy = value;
                    this.RaiseDataMemberChanged("KodPocztowy");
                    this.OnKodPocztowyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Kraj' value.
        /// </summary>
        [DataMember()]
        public string Kraj
        {
            get
            {
                return this._kraj;
            }
            set
            {
                if ((this._kraj != value))
                {
                    this.OnKrajChanging(value);
                    this.RaiseDataMemberChanging("Kraj");
                    this.ValidateProperty("Kraj", value);
                    this._kraj = value;
                    this.RaiseDataMemberChanged("Kraj");
                    this.OnKrajChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Miasto' value.
        /// </summary>
        [DataMember()]
        public string Miasto
        {
            get
            {
                return this._miasto;
            }
            set
            {
                if ((this._miasto != value))
                {
                    this.OnMiastoChanging(value);
                    this.RaiseDataMemberChanging("Miasto");
                    this.ValidateProperty("Miasto", value);
                    this._miasto = value;
                    this.RaiseDataMemberChanged("Miasto");
                    this.OnMiastoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nazwisko' value.
        /// </summary>
        [DataMember()]
        public string Nazwisko
        {
            get
            {
                return this._nazwisko;
            }
            set
            {
                if ((this._nazwisko != value))
                {
                    this.OnNazwiskoChanging(value);
                    this.RaiseDataMemberChanging("Nazwisko");
                    this.ValidateProperty("Nazwisko", value);
                    this._nazwisko = value;
                    this.RaiseDataMemberChanged("Nazwisko");
                    this.OnNazwiskoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NIP' value.
        /// </summary>
        [DataMember()]
        public string NIP
        {
            get
            {
                return this._nip;
            }
            set
            {
                if ((this._nip != value))
                {
                    this.OnNIPChanging(value);
                    this.RaiseDataMemberChanging("NIP");
                    this.ValidateProperty("NIP", value);
                    this._nip = value;
                    this.RaiseDataMemberChanged("NIP");
                    this.OnNIPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Numer' value.
        /// </summary>
        [DataMember()]
        public string Numer
        {
            get
            {
                return this._numer;
            }
            set
            {
                if ((this._numer != value))
                {
                    this.OnNumerChanging(value);
                    this.RaiseDataMemberChanging("Numer");
                    this.ValidateProperty("Numer", value);
                    this._numer = value;
                    this.RaiseDataMemberChanged("Numer");
                    this.OnNumerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Telefon' value.
        /// </summary>
        [DataMember()]
        public string Telefon
        {
            get
            {
                return this._telefon;
            }
            set
            {
                if ((this._telefon != value))
                {
                    this.OnTelefonChanging(value);
                    this.RaiseDataMemberChanging("Telefon");
                    this.ValidateProperty("Telefon", value);
                    this._telefon = value;
                    this.RaiseDataMemberChanged("Telefon");
                    this.OnTelefonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ulica' value.
        /// </summary>
        [DataMember()]
        public string Ulica
        {
            get
            {
                return this._ulica;
            }
            set
            {
                if ((this._ulica != value))
                {
                    this.OnUlicaChanging(value);
                    this.RaiseDataMemberChanging("Ulica");
                    this.ValidateProperty("Ulica", value);
                    this._ulica = value;
                    this.RaiseDataMemberChanged("Ulica");
                    this.OnUlicaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'PracownikPOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs")]
    public sealed partial class PracownikPOCO : Entity
    {
        
        private int _id;
        
        private string _imie;
        
        private string _nazwisko;
        
        private string _pesel;
        
        private EntityRef<PracownikRodzajPOCO> _rodzaj;
        
        private int _rodzajID;
        
        private EntityRef<PracownikStatusPOCO> _status;
        
        private int _statusID;
        
        private int _userID;
        
        private string _uwagiDoStatusu;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnImieChanging(string value);
        partial void OnImieChanged();
        partial void OnNazwiskoChanging(string value);
        partial void OnNazwiskoChanged();
        partial void OnPeselChanging(string value);
        partial void OnPeselChanged();
        partial void OnRodzajIDChanging(int value);
        partial void OnRodzajIDChanged();
        partial void OnStatusIDChanging(int value);
        partial void OnStatusIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnUwagiDoStatusuChanging(string value);
        partial void OnUwagiDoStatusuChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PracownikPOCO"/> class.
        /// </summary>
        public PracownikPOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Imie' value.
        /// </summary>
        [DataMember()]
        public string Imie
        {
            get
            {
                return this._imie;
            }
            set
            {
                if ((this._imie != value))
                {
                    this.OnImieChanging(value);
                    this.RaiseDataMemberChanging("Imie");
                    this.ValidateProperty("Imie", value);
                    this._imie = value;
                    this.RaiseDataMemberChanged("Imie");
                    this.OnImieChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nazwisko' value.
        /// </summary>
        [DataMember()]
        public string Nazwisko
        {
            get
            {
                return this._nazwisko;
            }
            set
            {
                if ((this._nazwisko != value))
                {
                    this.OnNazwiskoChanging(value);
                    this.RaiseDataMemberChanging("Nazwisko");
                    this.ValidateProperty("Nazwisko", value);
                    this._nazwisko = value;
                    this.RaiseDataMemberChanged("Nazwisko");
                    this.OnNazwiskoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Pesel' value.
        /// </summary>
        [DataMember()]
        public string Pesel
        {
            get
            {
                return this._pesel;
            }
            set
            {
                if ((this._pesel != value))
                {
                    this.OnPeselChanging(value);
                    this.RaiseDataMemberChanging("Pesel");
                    this.ValidateProperty("Pesel", value);
                    this._pesel = value;
                    this.RaiseDataMemberChanged("Pesel");
                    this.OnPeselChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PracownikRodzajPOCO"/> entity.
        /// </summary>
        [Association("PracownikRodzaj", "RodzajID", "Id", IsForeignKey=true)]
        public PracownikRodzajPOCO Rodzaj
        {
            get
            {
                if ((this._rodzaj == null))
                {
                    this._rodzaj = new EntityRef<PracownikRodzajPOCO>(this, "Rodzaj", this.FilterRodzaj);
                }
                return this._rodzaj.Entity;
            }
            set
            {
                PracownikRodzajPOCO previous = this.Rodzaj;
                if ((previous != value))
                {
                    this.ValidateProperty("Rodzaj", value);
                    if ((value != null))
                    {
                        this.RodzajID = value.Id;
                    }
                    else
                    {
                        this.RodzajID = default(int);
                    }
                    this._rodzaj.Entity = value;
                    this.RaisePropertyChanged("Rodzaj");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RodzajID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RodzajID
        {
            get
            {
                return this._rodzajID;
            }
            set
            {
                if ((this._rodzajID != value))
                {
                    this.OnRodzajIDChanging(value);
                    this.RaiseDataMemberChanging("RodzajID");
                    this.ValidateProperty("RodzajID", value);
                    this._rodzajID = value;
                    this.RaiseDataMemberChanged("RodzajID");
                    this.OnRodzajIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PracownikStatusPOCO"/> entity.
        /// </summary>
        [Association("PracownikStatus", "StatusID", "Id", IsForeignKey=true)]
        public PracownikStatusPOCO Status
        {
            get
            {
                if ((this._status == null))
                {
                    this._status = new EntityRef<PracownikStatusPOCO>(this, "Status", this.FilterStatus);
                }
                return this._status.Entity;
            }
            set
            {
                PracownikStatusPOCO previous = this.Status;
                if ((previous != value))
                {
                    this.ValidateProperty("Status", value);
                    if ((value != null))
                    {
                        this.StatusID = value.Id;
                    }
                    else
                    {
                        this.StatusID = default(int);
                    }
                    this._status.Entity = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int StatusID
        {
            get
            {
                return this._statusID;
            }
            set
            {
                if ((this._statusID != value))
                {
                    this.OnStatusIDChanging(value);
                    this.RaiseDataMemberChanging("StatusID");
                    this.ValidateProperty("StatusID", value);
                    this._statusID = value;
                    this.RaiseDataMemberChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public int UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UwagiDoStatusu' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Uwagi do statusu")]
        public string UwagiDoStatusu
        {
            get
            {
                return this._uwagiDoStatusu;
            }
            set
            {
                if ((this._uwagiDoStatusu != value))
                {
                    this.OnUwagiDoStatusuChanging(value);
                    this.RaiseDataMemberChanging("UwagiDoStatusu");
                    this.ValidateProperty("UwagiDoStatusu", value);
                    this._uwagiDoStatusu = value;
                    this.RaiseDataMemberChanged("UwagiDoStatusu");
                    this.OnUwagiDoStatusuChanged();
                }
            }
        }
        
        private bool FilterRodzaj(PracownikRodzajPOCO entity)
        {
            return (entity.Id == this.RodzajID);
        }
        
        private bool FilterStatus(PracownikStatusPOCO entity)
        {
            return (entity.Id == this.StatusID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'PracownikRodzajPOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs")]
    public sealed partial class PracownikRodzajPOCO : Entity
    {
        
        private int _id;
        
        private string _rodzaj;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnRodzajChanging(string value);
        partial void OnRodzajChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PracownikRodzajPOCO"/> class.
        /// </summary>
        public PracownikRodzajPOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rodzaj' value.
        /// </summary>
        [DataMember()]
        public string Rodzaj
        {
            get
            {
                return this._rodzaj;
            }
            set
            {
                if ((this._rodzaj != value))
                {
                    this.OnRodzajChanging(value);
                    this.RaiseDataMemberChanging("Rodzaj");
                    this.ValidateProperty("Rodzaj", value);
                    this._rodzaj = value;
                    this.RaiseDataMemberChanged("Rodzaj");
                    this.OnRodzajChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'PracownikStatusPOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs")]
    public sealed partial class PracownikStatusPOCO : Entity
    {
        
        private int _id;
        
        private string _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PracownikStatusPOCO"/> class.
        /// </summary>
        public PracownikStatusPOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'PracownikUmowaPOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs")]
    public sealed partial class PracownikUmowaPOCO : Entity
    {
        
        private bool _aktualna;
        
        private Nullable<DateTime> _dataPodpisania;
        
        private Nullable<DateTime> _dataWygasniecia;
        
        private int _id;
        
        private int _placa;
        
        private EntityRef<PracownikPOCO> _pracownik;
        
        private int _pracownikID;
        
        private string _uwagi;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAktualnaChanging(bool value);
        partial void OnAktualnaChanged();
        partial void OnDataPodpisaniaChanging(Nullable<DateTime> value);
        partial void OnDataPodpisaniaChanged();
        partial void OnDataWygasnieciaChanging(Nullable<DateTime> value);
        partial void OnDataWygasnieciaChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnPlacaChanging(int value);
        partial void OnPlacaChanged();
        partial void OnPracownikIDChanging(int value);
        partial void OnPracownikIDChanged();
        partial void OnUwagiChanging(string value);
        partial void OnUwagiChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PracownikUmowaPOCO"/> class.
        /// </summary>
        public PracownikUmowaPOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Aktualna' value.
        /// </summary>
        [DataMember()]
        public bool Aktualna
        {
            get
            {
                return this._aktualna;
            }
            set
            {
                if ((this._aktualna != value))
                {
                    this.OnAktualnaChanging(value);
                    this.RaiseDataMemberChanging("Aktualna");
                    this.ValidateProperty("Aktualna", value);
                    this._aktualna = value;
                    this.RaiseDataMemberChanged("Aktualna");
                    this.OnAktualnaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataPodpisania' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Data podpisania umowy", Name="Data podpisania")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public Nullable<DateTime> DataPodpisania
        {
            get
            {
                return this._dataPodpisania;
            }
            set
            {
                if ((this._dataPodpisania != value))
                {
                    this.OnDataPodpisaniaChanging(value);
                    this.RaiseDataMemberChanging("DataPodpisania");
                    this.ValidateProperty("DataPodpisania", value);
                    this._dataPodpisania = value;
                    this.RaiseDataMemberChanged("DataPodpisania");
                    this.OnDataPodpisaniaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataWygasniecia' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Data wygaśnięcia umowy", Name="Data wygasniecia")]
        public Nullable<DateTime> DataWygasniecia
        {
            get
            {
                return this._dataWygasniecia;
            }
            set
            {
                if ((this._dataWygasniecia != value))
                {
                    this.OnDataWygasnieciaChanging(value);
                    this.RaiseDataMemberChanging("DataWygasniecia");
                    this.ValidateProperty("DataWygasniecia", value);
                    this._dataWygasniecia = value;
                    this.RaiseDataMemberChanged("DataWygasniecia");
                    this.OnDataWygasnieciaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Placa' value.
        /// </summary>
        [DataMember()]
        [RegularExpression("^[0-9]*$", ErrorMessage="Pole placa musi się składać tylko z cyfr")]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public int Placa
        {
            get
            {
                return this._placa;
            }
            set
            {
                if ((this._placa != value))
                {
                    this.OnPlacaChanging(value);
                    this.RaiseDataMemberChanging("Placa");
                    this.ValidateProperty("Placa", value);
                    this._placa = value;
                    this.RaiseDataMemberChanged("Placa");
                    this.OnPlacaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PracownikPOCO"/> entity.
        /// </summary>
        [Association("UmowaPracownik", "PracownikID", "Id", IsForeignKey=true)]
        public PracownikPOCO Pracownik
        {
            get
            {
                if ((this._pracownik == null))
                {
                    this._pracownik = new EntityRef<PracownikPOCO>(this, "Pracownik", this.FilterPracownik);
                }
                return this._pracownik.Entity;
            }
            set
            {
                PracownikPOCO previous = this.Pracownik;
                if ((previous != value))
                {
                    this.ValidateProperty("Pracownik", value);
                    if ((value != null))
                    {
                        this.PracownikID = value.Id;
                    }
                    else
                    {
                        this.PracownikID = default(int);
                    }
                    this._pracownik.Entity = value;
                    this.RaisePropertyChanged("Pracownik");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PracownikID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PracownikID
        {
            get
            {
                return this._pracownikID;
            }
            set
            {
                if ((this._pracownikID != value))
                {
                    this.OnPracownikIDChanging(value);
                    this.RaiseDataMemberChanging("PracownikID");
                    this.ValidateProperty("PracownikID", value);
                    this._pracownikID = value;
                    this.RaiseDataMemberChanged("PracownikID");
                    this.OnPracownikIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Uwagi' value.
        /// </summary>
        [DataMember()]
        [StringLength(255, ErrorMessage="Pole uwagi maksymalna ilość znaków 20.")]
        public string Uwagi
        {
            get
            {
                return this._uwagi;
            }
            set
            {
                if ((this._uwagi != value))
                {
                    this.OnUwagiChanging(value);
                    this.RaiseDataMemberChanging("Uwagi");
                    this.ValidateProperty("Uwagi", value);
                    this._uwagi = value;
                    this.RaiseDataMemberChanged("Uwagi");
                    this.OnUwagiChanged();
                }
            }
        }
        
        private bool FilterPracownik(PracownikPOCO entity)
        {
            return (entity.Id == this.PracownikID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ProduktPOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs")]
    public sealed partial class ProduktPOCO : Entity
    {
        
        private decimal _cena;
        
        private int _docelowaIlosc;
        
        private int _id;
        
        private int _ilosc;
        
        private string _nazwa;
        
        private EntityRef<ProduktProducentPOCO> _producent;
        
        private int _producentID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCenaChanging(decimal value);
        partial void OnCenaChanged();
        partial void OnDocelowaIloscChanging(int value);
        partial void OnDocelowaIloscChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIloscChanging(int value);
        partial void OnIloscChanged();
        partial void OnNazwaChanging(string value);
        partial void OnNazwaChanged();
        partial void OnProducentIDChanging(int value);
        partial void OnProducentIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProduktPOCO"/> class.
        /// </summary>
        public ProduktPOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Cena' value.
        /// </summary>
        [DataMember()]
        public decimal Cena
        {
            get
            {
                return this._cena;
            }
            set
            {
                if ((this._cena != value))
                {
                    this.OnCenaChanging(value);
                    this.RaiseDataMemberChanging("Cena");
                    this.ValidateProperty("Cena", value);
                    this._cena = value;
                    this.RaiseDataMemberChanged("Cena");
                    this.OnCenaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DocelowaIlosc' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Docelowa Ilość")]
        public int DocelowaIlosc
        {
            get
            {
                return this._docelowaIlosc;
            }
            set
            {
                if ((this._docelowaIlosc != value))
                {
                    this.OnDocelowaIloscChanging(value);
                    this.RaiseDataMemberChanging("DocelowaIlosc");
                    this.ValidateProperty("DocelowaIlosc", value);
                    this._docelowaIlosc = value;
                    this.RaiseDataMemberChanged("DocelowaIlosc");
                    this.OnDocelowaIloscChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ilosc' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Ilość")]
        public int Ilosc
        {
            get
            {
                return this._ilosc;
            }
            set
            {
                if ((this._ilosc != value))
                {
                    this.OnIloscChanging(value);
                    this.RaiseDataMemberChanging("Ilosc");
                    this.ValidateProperty("Ilosc", value);
                    this._ilosc = value;
                    this.RaiseDataMemberChanged("Ilosc");
                    this.OnIloscChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nazwa' value.
        /// </summary>
        [DataMember()]
        public string Nazwa
        {
            get
            {
                return this._nazwa;
            }
            set
            {
                if ((this._nazwa != value))
                {
                    this.OnNazwaChanging(value);
                    this.RaiseDataMemberChanging("Nazwa");
                    this.ValidateProperty("Nazwa", value);
                    this._nazwa = value;
                    this.RaiseDataMemberChanged("Nazwa");
                    this.OnNazwaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ProduktProducentPOCO"/> entity.
        /// </summary>
        [Association("ProduktProducent", "ProducentID", "Id", IsForeignKey=true)]
        public ProduktProducentPOCO Producent
        {
            get
            {
                if ((this._producent == null))
                {
                    this._producent = new EntityRef<ProduktProducentPOCO>(this, "Producent", this.FilterProducent);
                }
                return this._producent.Entity;
            }
            set
            {
                ProduktProducentPOCO previous = this.Producent;
                if ((previous != value))
                {
                    this.ValidateProperty("Producent", value);
                    if ((value != null))
                    {
                        this.ProducentID = value.Id;
                    }
                    else
                    {
                        this.ProducentID = default(int);
                    }
                    this._producent.Entity = value;
                    this.RaisePropertyChanged("Producent");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProducentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ProducentID
        {
            get
            {
                return this._producentID;
            }
            set
            {
                if ((this._producentID != value))
                {
                    this.OnProducentIDChanging(value);
                    this.RaiseDataMemberChanging("ProducentID");
                    this.ValidateProperty("ProducentID", value);
                    this._producentID = value;
                    this.RaiseDataMemberChanged("ProducentID");
                    this.OnProducentIDChanged();
                }
            }
        }
        
        private bool FilterProducent(ProduktProducentPOCO entity)
        {
            return (entity.Id == this.ProducentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ProduktProducentPOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs")]
    public sealed partial class ProduktProducentPOCO : Entity
    {
        
        private int _id;
        
        private string _nazwa;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNazwaChanging(string value);
        partial void OnNazwaChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProduktProducentPOCO"/> class.
        /// </summary>
        public ProduktProducentPOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nazwa' value.
        /// </summary>
        [DataMember()]
        public string Nazwa
        {
            get
            {
                return this._nazwa;
            }
            set
            {
                if ((this._nazwa != value))
                {
                    this.OnNazwaChanging(value);
                    this.RaiseDataMemberChanging("Nazwa");
                    this.ValidateProperty("Nazwa", value);
                    this._nazwa = value;
                    this.RaiseDataMemberChanged("Nazwa");
                    this.OnNazwaChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ZamowieniaKoszykPOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs")]
    public sealed partial class ZamowieniaKoszykPOCO : Entity
    {
        
        private decimal _cenaCalosciowa;
        
        private decimal _cenaJednostkowa;
        
        private int _id;
        
        private int _ilosc;
        
        private string _nazwa;
        
        private string _producent;
        
        private int _produktID;
        
        private int _zamowienieID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCenaCalosciowaChanging(decimal value);
        partial void OnCenaCalosciowaChanged();
        partial void OnCenaJednostkowaChanging(decimal value);
        partial void OnCenaJednostkowaChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIloscChanging(int value);
        partial void OnIloscChanged();
        partial void OnNazwaChanging(string value);
        partial void OnNazwaChanged();
        partial void OnProducentChanging(string value);
        partial void OnProducentChanged();
        partial void OnProduktIDChanging(int value);
        partial void OnProduktIDChanged();
        partial void OnZamowienieIDChanging(int value);
        partial void OnZamowienieIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ZamowieniaKoszykPOCO"/> class.
        /// </summary>
        public ZamowieniaKoszykPOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CenaCalosciowa' value.
        /// </summary>
        [DataMember()]
        public decimal CenaCalosciowa
        {
            get
            {
                return this._cenaCalosciowa;
            }
            set
            {
                if ((this._cenaCalosciowa != value))
                {
                    this.OnCenaCalosciowaChanging(value);
                    this.RaiseDataMemberChanging("CenaCalosciowa");
                    this.ValidateProperty("CenaCalosciowa", value);
                    this._cenaCalosciowa = value;
                    this.RaiseDataMemberChanged("CenaCalosciowa");
                    this.OnCenaCalosciowaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CenaJednostkowa' value.
        /// </summary>
        [DataMember()]
        public decimal CenaJednostkowa
        {
            get
            {
                return this._cenaJednostkowa;
            }
            set
            {
                if ((this._cenaJednostkowa != value))
                {
                    this.OnCenaJednostkowaChanging(value);
                    this.RaiseDataMemberChanging("CenaJednostkowa");
                    this.ValidateProperty("CenaJednostkowa", value);
                    this._cenaJednostkowa = value;
                    this.RaiseDataMemberChanged("CenaJednostkowa");
                    this.OnCenaJednostkowaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ilosc' value.
        /// </summary>
        [DataMember()]
        public int Ilosc
        {
            get
            {
                return this._ilosc;
            }
            set
            {
                if ((this._ilosc != value))
                {
                    this.OnIloscChanging(value);
                    this.RaiseDataMemberChanging("Ilosc");
                    this.ValidateProperty("Ilosc", value);
                    this._ilosc = value;
                    this.RaiseDataMemberChanged("Ilosc");
                    this.OnIloscChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nazwa' value.
        /// </summary>
        [DataMember()]
        public string Nazwa
        {
            get
            {
                return this._nazwa;
            }
            set
            {
                if ((this._nazwa != value))
                {
                    this.OnNazwaChanging(value);
                    this.RaiseDataMemberChanging("Nazwa");
                    this.ValidateProperty("Nazwa", value);
                    this._nazwa = value;
                    this.RaiseDataMemberChanged("Nazwa");
                    this.OnNazwaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Producent' value.
        /// </summary>
        [DataMember()]
        public string Producent
        {
            get
            {
                return this._producent;
            }
            set
            {
                if ((this._producent != value))
                {
                    this.OnProducentChanging(value);
                    this.RaiseDataMemberChanging("Producent");
                    this.ValidateProperty("Producent", value);
                    this._producent = value;
                    this.RaiseDataMemberChanged("Producent");
                    this.OnProducentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProduktID' value.
        /// </summary>
        [DataMember()]
        public int ProduktID
        {
            get
            {
                return this._produktID;
            }
            set
            {
                if ((this._produktID != value))
                {
                    this.OnProduktIDChanging(value);
                    this.RaiseDataMemberChanging("ProduktID");
                    this.ValidateProperty("ProduktID", value);
                    this._produktID = value;
                    this.RaiseDataMemberChanged("ProduktID");
                    this.OnProduktIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZamowienieID' value.
        /// </summary>
        [DataMember()]
        public int ZamowienieID
        {
            get
            {
                return this._zamowienieID;
            }
            set
            {
                if ((this._zamowienieID != value))
                {
                    this.OnZamowienieIDChanging(value);
                    this.RaiseDataMemberChanging("ZamowienieID");
                    this.ValidateProperty("ZamowienieID", value);
                    this._zamowienieID = value;
                    this.RaiseDataMemberChanged("ZamowienieID");
                    this.OnZamowienieIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ZamowieniePOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs")]
    public sealed partial class ZamowieniePOCO : Entity
    {
        
        private Nullable<DateTime> _dataZlozenia;
        
        private Nullable<DateTime> _dataZrealizowania;
        
        private int _id;
        
        private int _iloscProduktow;
        
        private EntityRef<KlientPOCO> _klient;
        
        private string _klientFirma;
        
        private int _klientID;
        
        private string _klientNazwa;
        
        private EntityRef<PracownikPOCO> _pracownik;
        
        private int _pracownikID;
        
        private bool _zrealizowano;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataZlozeniaChanging(Nullable<DateTime> value);
        partial void OnDataZlozeniaChanged();
        partial void OnDataZrealizowaniaChanging(Nullable<DateTime> value);
        partial void OnDataZrealizowaniaChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIloscProduktowChanging(int value);
        partial void OnIloscProduktowChanged();
        partial void OnKlientFirmaChanging(string value);
        partial void OnKlientFirmaChanged();
        partial void OnKlientIDChanging(int value);
        partial void OnKlientIDChanged();
        partial void OnKlientNazwaChanging(string value);
        partial void OnKlientNazwaChanged();
        partial void OnPracownikIDChanging(int value);
        partial void OnPracownikIDChanged();
        partial void OnZrealizowanoChanging(bool value);
        partial void OnZrealizowanoChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ZamowieniePOCO"/> class.
        /// </summary>
        public ZamowieniePOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DataZlozenia' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DataZlozenia
        {
            get
            {
                return this._dataZlozenia;
            }
            set
            {
                if ((this._dataZlozenia != value))
                {
                    this.OnDataZlozeniaChanging(value);
                    this.RaiseDataMemberChanging("DataZlozenia");
                    this.ValidateProperty("DataZlozenia", value);
                    this._dataZlozenia = value;
                    this.RaiseDataMemberChanged("DataZlozenia");
                    this.OnDataZlozeniaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataZrealizowania' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DataZrealizowania
        {
            get
            {
                return this._dataZrealizowania;
            }
            set
            {
                if ((this._dataZrealizowania != value))
                {
                    this.OnDataZrealizowaniaChanging(value);
                    this.RaiseDataMemberChanging("DataZrealizowania");
                    this.ValidateProperty("DataZrealizowania", value);
                    this._dataZrealizowania = value;
                    this.RaiseDataMemberChanged("DataZrealizowania");
                    this.OnDataZrealizowaniaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IloscProduktow' value.
        /// </summary>
        [DataMember()]
        public int IloscProduktow
        {
            get
            {
                return this._iloscProduktow;
            }
            set
            {
                if ((this._iloscProduktow != value))
                {
                    this.OnIloscProduktowChanging(value);
                    this.RaiseDataMemberChanging("IloscProduktow");
                    this.ValidateProperty("IloscProduktow", value);
                    this._iloscProduktow = value;
                    this.RaiseDataMemberChanged("IloscProduktow");
                    this.OnIloscProduktowChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="KlientPOCO"/> entity.
        /// </summary>
        [Association("ZamowienieKlient", "KlientID", "Id", IsForeignKey=true)]
        public KlientPOCO Klient
        {
            get
            {
                if ((this._klient == null))
                {
                    this._klient = new EntityRef<KlientPOCO>(this, "Klient", this.FilterKlient);
                }
                return this._klient.Entity;
            }
            set
            {
                KlientPOCO previous = this.Klient;
                if ((previous != value))
                {
                    this.ValidateProperty("Klient", value);
                    if ((value != null))
                    {
                        this.KlientID = value.Id;
                    }
                    else
                    {
                        this.KlientID = default(int);
                    }
                    this._klient.Entity = value;
                    this.RaisePropertyChanged("Klient");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KlientFirma' value.
        /// </summary>
        [DataMember()]
        public string KlientFirma
        {
            get
            {
                return this._klientFirma;
            }
            set
            {
                if ((this._klientFirma != value))
                {
                    this.OnKlientFirmaChanging(value);
                    this.RaiseDataMemberChanging("KlientFirma");
                    this.ValidateProperty("KlientFirma", value);
                    this._klientFirma = value;
                    this.RaiseDataMemberChanged("KlientFirma");
                    this.OnKlientFirmaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KlientID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int KlientID
        {
            get
            {
                return this._klientID;
            }
            set
            {
                if ((this._klientID != value))
                {
                    this.OnKlientIDChanging(value);
                    this.RaiseDataMemberChanging("KlientID");
                    this.ValidateProperty("KlientID", value);
                    this._klientID = value;
                    this.RaiseDataMemberChanged("KlientID");
                    this.OnKlientIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KlientNazwa' value.
        /// </summary>
        [DataMember()]
        public string KlientNazwa
        {
            get
            {
                return this._klientNazwa;
            }
            set
            {
                if ((this._klientNazwa != value))
                {
                    this.OnKlientNazwaChanging(value);
                    this.RaiseDataMemberChanging("KlientNazwa");
                    this.ValidateProperty("KlientNazwa", value);
                    this._klientNazwa = value;
                    this.RaiseDataMemberChanged("KlientNazwa");
                    this.OnKlientNazwaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PracownikPOCO"/> entity.
        /// </summary>
        [Association("ZamowieniePracownik", "PracownikID", "Id", IsForeignKey=true)]
        public PracownikPOCO Pracownik
        {
            get
            {
                if ((this._pracownik == null))
                {
                    this._pracownik = new EntityRef<PracownikPOCO>(this, "Pracownik", this.FilterPracownik);
                }
                return this._pracownik.Entity;
            }
            set
            {
                PracownikPOCO previous = this.Pracownik;
                if ((previous != value))
                {
                    this.ValidateProperty("Pracownik", value);
                    if ((value != null))
                    {
                        this.PracownikID = value.Id;
                    }
                    else
                    {
                        this.PracownikID = default(int);
                    }
                    this._pracownik.Entity = value;
                    this.RaisePropertyChanged("Pracownik");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PracownikID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PracownikID
        {
            get
            {
                return this._pracownikID;
            }
            set
            {
                if ((this._pracownikID != value))
                {
                    this.OnPracownikIDChanging(value);
                    this.RaiseDataMemberChanging("PracownikID");
                    this.ValidateProperty("PracownikID", value);
                    this._pracownikID = value;
                    this.RaiseDataMemberChanged("PracownikID");
                    this.OnPracownikIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zrealizowano' value.
        /// </summary>
        [DataMember()]
        public bool Zrealizowano
        {
            get
            {
                return this._zrealizowano;
            }
            set
            {
                if ((this._zrealizowano != value))
                {
                    this.OnZrealizowanoChanging(value);
                    this.RaiseDataMemberChanging("Zrealizowano");
                    this.ValidateProperty("Zrealizowano", value);
                    this._zrealizowano = value;
                    this.RaiseDataMemberChanged("Zrealizowano");
                    this.OnZrealizowanoChanged();
                }
            }
        }
        
        private bool FilterKlient(KlientPOCO entity)
        {
            return (entity.Id == this.KlientID);
        }
        
        private bool FilterPracownik(PracownikPOCO entity)
        {
            return (entity.Id == this.PracownikID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace AwesomeParts.Web.POCOs.MiniPOCOs
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using AwesomeParts.Web.POCOs;
    
    
    /// <summary>
    /// The 'KoszykPOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs.MiniPOCOs")]
    public sealed partial class KoszykPOCO : Entity
    {
        
        private decimal _cenaCalosciowa;
        
        private decimal _cenaJednostkowa;
        
        private int _dayZrealizowania;
        
        private string _firma;
        
        private int _id;
        
        private int _ilosc;
        
        private string _klientNazwa;
        
        private int _miesiacZrealizowania;
        
        private string _miesiacZrealizowaniaString;
        
        private string _nazwa;
        
        private string _producent;
        
        private int _produktID;
        
        private int _rokZrealizowania;
        
        private EntityRef<ZamowieniePOCO> _zamowienie;
        
        private int _zamowienieID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCenaCalosciowaChanging(decimal value);
        partial void OnCenaCalosciowaChanged();
        partial void OnCenaJednostkowaChanging(decimal value);
        partial void OnCenaJednostkowaChanged();
        partial void OnDayZrealizowaniaChanging(int value);
        partial void OnDayZrealizowaniaChanged();
        partial void OnFirmaChanging(string value);
        partial void OnFirmaChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIloscChanging(int value);
        partial void OnIloscChanged();
        partial void OnKlientNazwaChanging(string value);
        partial void OnKlientNazwaChanged();
        partial void OnMiesiacZrealizowaniaChanging(int value);
        partial void OnMiesiacZrealizowaniaChanged();
        partial void OnMiesiacZrealizowaniaStringChanging(string value);
        partial void OnMiesiacZrealizowaniaStringChanged();
        partial void OnNazwaChanging(string value);
        partial void OnNazwaChanged();
        partial void OnProducentChanging(string value);
        partial void OnProducentChanged();
        partial void OnProduktIDChanging(int value);
        partial void OnProduktIDChanged();
        partial void OnRokZrealizowaniaChanging(int value);
        partial void OnRokZrealizowaniaChanged();
        partial void OnZamowienieIDChanging(int value);
        partial void OnZamowienieIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="KoszykPOCO"/> class.
        /// </summary>
        public KoszykPOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CenaCalosciowa' value.
        /// </summary>
        [DataMember()]
        public decimal CenaCalosciowa
        {
            get
            {
                return this._cenaCalosciowa;
            }
            set
            {
                if ((this._cenaCalosciowa != value))
                {
                    this.OnCenaCalosciowaChanging(value);
                    this.RaiseDataMemberChanging("CenaCalosciowa");
                    this.ValidateProperty("CenaCalosciowa", value);
                    this._cenaCalosciowa = value;
                    this.RaiseDataMemberChanged("CenaCalosciowa");
                    this.OnCenaCalosciowaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CenaJednostkowa' value.
        /// </summary>
        [DataMember()]
        public decimal CenaJednostkowa
        {
            get
            {
                return this._cenaJednostkowa;
            }
            set
            {
                if ((this._cenaJednostkowa != value))
                {
                    this.OnCenaJednostkowaChanging(value);
                    this.RaiseDataMemberChanging("CenaJednostkowa");
                    this.ValidateProperty("CenaJednostkowa", value);
                    this._cenaJednostkowa = value;
                    this.RaiseDataMemberChanged("CenaJednostkowa");
                    this.OnCenaJednostkowaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayZrealizowania' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int DayZrealizowania
        {
            get
            {
                return this._dayZrealizowania;
            }
            set
            {
                if ((this._dayZrealizowania != value))
                {
                    this.OnDayZrealizowaniaChanging(value);
                    this.ValidateProperty("DayZrealizowania", value);
                    this._dayZrealizowania = value;
                    this.RaisePropertyChanged("DayZrealizowania");
                    this.OnDayZrealizowaniaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Firma' value.
        /// </summary>
        [DataMember()]
        public string Firma
        {
            get
            {
                return this._firma;
            }
            set
            {
                if ((this._firma != value))
                {
                    this.OnFirmaChanging(value);
                    this.RaiseDataMemberChanging("Firma");
                    this.ValidateProperty("Firma", value);
                    this._firma = value;
                    this.RaiseDataMemberChanged("Firma");
                    this.OnFirmaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ilosc' value.
        /// </summary>
        [DataMember()]
        public int Ilosc
        {
            get
            {
                return this._ilosc;
            }
            set
            {
                if ((this._ilosc != value))
                {
                    this.OnIloscChanging(value);
                    this.RaiseDataMemberChanging("Ilosc");
                    this.ValidateProperty("Ilosc", value);
                    this._ilosc = value;
                    this.RaiseDataMemberChanged("Ilosc");
                    this.OnIloscChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KlientNazwa' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string KlientNazwa
        {
            get
            {
                return this._klientNazwa;
            }
            set
            {
                if ((this._klientNazwa != value))
                {
                    this.OnKlientNazwaChanging(value);
                    this.ValidateProperty("KlientNazwa", value);
                    this._klientNazwa = value;
                    this.RaisePropertyChanged("KlientNazwa");
                    this.OnKlientNazwaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MiesiacZrealizowania' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int MiesiacZrealizowania
        {
            get
            {
                return this._miesiacZrealizowania;
            }
            set
            {
                if ((this._miesiacZrealizowania != value))
                {
                    this.OnMiesiacZrealizowaniaChanging(value);
                    this.ValidateProperty("MiesiacZrealizowania", value);
                    this._miesiacZrealizowania = value;
                    this.RaisePropertyChanged("MiesiacZrealizowania");
                    this.OnMiesiacZrealizowaniaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MiesiacZrealizowaniaString' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string MiesiacZrealizowaniaString
        {
            get
            {
                return this._miesiacZrealizowaniaString;
            }
            set
            {
                if ((this._miesiacZrealizowaniaString != value))
                {
                    this.OnMiesiacZrealizowaniaStringChanging(value);
                    this.ValidateProperty("MiesiacZrealizowaniaString", value);
                    this._miesiacZrealizowaniaString = value;
                    this.RaisePropertyChanged("MiesiacZrealizowaniaString");
                    this.OnMiesiacZrealizowaniaStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nazwa' value.
        /// </summary>
        [DataMember()]
        public string Nazwa
        {
            get
            {
                return this._nazwa;
            }
            set
            {
                if ((this._nazwa != value))
                {
                    this.OnNazwaChanging(value);
                    this.RaiseDataMemberChanging("Nazwa");
                    this.ValidateProperty("Nazwa", value);
                    this._nazwa = value;
                    this.RaiseDataMemberChanged("Nazwa");
                    this.OnNazwaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Producent' value.
        /// </summary>
        [DataMember()]
        public string Producent
        {
            get
            {
                return this._producent;
            }
            set
            {
                if ((this._producent != value))
                {
                    this.OnProducentChanging(value);
                    this.RaiseDataMemberChanging("Producent");
                    this.ValidateProperty("Producent", value);
                    this._producent = value;
                    this.RaiseDataMemberChanged("Producent");
                    this.OnProducentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProduktID' value.
        /// </summary>
        [DataMember()]
        public int ProduktID
        {
            get
            {
                return this._produktID;
            }
            set
            {
                if ((this._produktID != value))
                {
                    this.OnProduktIDChanging(value);
                    this.RaiseDataMemberChanging("ProduktID");
                    this.ValidateProperty("ProduktID", value);
                    this._produktID = value;
                    this.RaiseDataMemberChanged("ProduktID");
                    this.OnProduktIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RokZrealizowania' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int RokZrealizowania
        {
            get
            {
                return this._rokZrealizowania;
            }
            set
            {
                if ((this._rokZrealizowania != value))
                {
                    this.OnRokZrealizowaniaChanging(value);
                    this.ValidateProperty("RokZrealizowania", value);
                    this._rokZrealizowania = value;
                    this.RaisePropertyChanged("RokZrealizowania");
                    this.OnRokZrealizowaniaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ZamowieniePOCO"/> entity.
        /// </summary>
        [Association("ZamowienieKoszykZamowienie", "ZamowienieID", "Id", IsForeignKey=true)]
        public ZamowieniePOCO Zamowienie
        {
            get
            {
                if ((this._zamowienie == null))
                {
                    this._zamowienie = new EntityRef<ZamowieniePOCO>(this, "Zamowienie", this.FilterZamowienie);
                }
                return this._zamowienie.Entity;
            }
            set
            {
                ZamowieniePOCO previous = this.Zamowienie;
                if ((previous != value))
                {
                    this.ValidateProperty("Zamowienie", value);
                    if ((value != null))
                    {
                        this.ZamowienieID = value.Id;
                    }
                    else
                    {
                        this.ZamowienieID = default(int);
                    }
                    this._zamowienie.Entity = value;
                    this.RaisePropertyChanged("Zamowienie");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZamowienieID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ZamowienieID
        {
            get
            {
                return this._zamowienieID;
            }
            set
            {
                if ((this._zamowienieID != value))
                {
                    this.OnZamowienieIDChanging(value);
                    this.RaiseDataMemberChanging("ZamowienieID");
                    this.ValidateProperty("ZamowienieID", value);
                    this._zamowienieID = value;
                    this.RaiseDataMemberChanged("ZamowienieID");
                    this.OnZamowienieIDChanged();
                }
            }
        }
        
        private bool FilterZamowienie(ZamowieniePOCO entity)
        {
            return (entity.Id == this.ZamowienieID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ProductSellPOCO' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/AwesomeParts.Web.POCOs.MiniPOCOs")]
    public sealed partial class ProductSellPOCO : Entity
    {
        
        private int _id;
        
        private int _ilosc;
        
        private int _month;
        
        private string _nazwa;
        
        private int _year;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIloscChanging(int value);
        partial void OnIloscChanged();
        partial void OnMonthChanging(int value);
        partial void OnMonthChanged();
        partial void OnNazwaChanging(string value);
        partial void OnNazwaChanged();
        partial void OnYearChanging(int value);
        partial void OnYearChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductSellPOCO"/> class.
        /// </summary>
        public ProductSellPOCO()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ilosc' value.
        /// </summary>
        [DataMember()]
        public int Ilosc
        {
            get
            {
                return this._ilosc;
            }
            set
            {
                if ((this._ilosc != value))
                {
                    this.OnIloscChanging(value);
                    this.RaiseDataMemberChanging("Ilosc");
                    this.ValidateProperty("Ilosc", value);
                    this._ilosc = value;
                    this.RaiseDataMemberChanged("Ilosc");
                    this.OnIloscChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Month' value.
        /// </summary>
        [DataMember()]
        public int Month
        {
            get
            {
                return this._month;
            }
            set
            {
                if ((this._month != value))
                {
                    this.OnMonthChanging(value);
                    this.RaiseDataMemberChanging("Month");
                    this.ValidateProperty("Month", value);
                    this._month = value;
                    this.RaiseDataMemberChanged("Month");
                    this.OnMonthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nazwa' value.
        /// </summary>
        [DataMember()]
        public string Nazwa
        {
            get
            {
                return this._nazwa;
            }
            set
            {
                if ((this._nazwa != value))
                {
                    this.OnNazwaChanging(value);
                    this.RaiseDataMemberChanging("Nazwa");
                    this.ValidateProperty("Nazwa", value);
                    this._nazwa = value;
                    this.RaiseDataMemberChanged("Nazwa");
                    this.OnNazwaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Year' value.
        /// </summary>
        [DataMember()]
        public int Year
        {
            get
            {
                return this._year;
            }
            set
            {
                if ((this._year != value))
                {
                    this.OnYearChanging(value);
                    this.RaiseDataMemberChanging("Year");
                    this.ValidateProperty("Year", value);
                    this._year = value;
                    this.RaiseDataMemberChanged("Year");
                    this.OnYearChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace AwesomeParts.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using AwesomeParts.Web.Models;
    using AwesomeParts.Web.POCOs;
    using AwesomeParts.Web.POCOs.MiniPOCOs;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AwesomePartsService' DomainService.
    /// </summary>
    public sealed partial class AwesomePartsContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AwesomePartsContext"/> class.
        /// </summary>
        public AwesomePartsContext() : 
                this(new WebDomainClient<IAwesomePartsServiceContract>(new Uri("AwesomeParts-Web-Services-AwesomePartsService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AwesomePartsContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AwesomePartsService service URI.</param>
        public AwesomePartsContext(Uri serviceUri) : 
                this(new WebDomainClient<IAwesomePartsServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AwesomePartsContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AwesomePartsContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ZamowieniePOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<ZamowieniePOCO> ZamowieniePOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZamowieniePOCO>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProductSellPOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<ProductSellPOCO> ProductSellPOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProductSellPOCO>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="KlientPOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<KlientPOCO> KlientPOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<KlientPOCO>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ZamowieniaKoszykPOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<ZamowieniaKoszykPOCO> ZamowieniaKoszykPOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZamowieniaKoszykPOCO>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="KoszykPOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<KoszykPOCO> KoszykPOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<KoszykPOCO>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PracownikPOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<PracownikPOCO> PracownikPOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PracownikPOCO>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PracownikRodzajPOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<PracownikRodzajPOCO> PracownikRodzajPOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PracownikRodzajPOCO>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PracownikStatusPOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<PracownikStatusPOCO> PracownikStatusPOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PracownikStatusPOCO>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProduktProducentPOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<ProduktProducentPOCO> ProduktProducentPOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProduktProducentPOCO>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProduktPOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<ProduktPOCO> ProduktPOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProduktPOCO>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PracownikUmowaPOCO"/> entity instances that have been loaded into this <see cref="AwesomePartsContext"/> instance.
        /// </summary>
        public EntitySet<PracownikUmowaPOCO> PracownikUmowaPOCOs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PracownikUmowaPOCO>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ZamowieniePOCO"/> entity instances using the 'GetAktualneZamowienieByKlientId' query.
        /// </summary>
        /// <param name="klientID">The value for the 'klientID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ZamowieniePOCO"/> entity instances.</returns>
        public EntityQuery<ZamowieniePOCO> GetAktualneZamowienieByKlientIdQuery(int klientID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("klientID", klientID);
            this.ValidateMethod("GetAktualneZamowienieByKlientIdQuery", parameters);
            return base.CreateQuery<ZamowieniePOCO>("GetAktualneZamowienieByKlientId", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductSellPOCO"/> entity instances using the 'GetCountProductsSoldByYear' query.
        /// </summary>
        /// <param name="year">The value for the 'year' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductSellPOCO"/> entity instances.</returns>
        public EntityQuery<ProductSellPOCO> GetCountProductsSoldByYearQuery(int year)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("year", year);
            this.ValidateMethod("GetCountProductsSoldByYearQuery", parameters);
            return base.CreateQuery<ProductSellPOCO>("GetCountProductsSoldByYear", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductSellPOCO"/> entity instances using the 'GetCountProductsSoldByYearRange' query.
        /// </summary>
        /// <param name="startYear">The value for the 'startYear' parameter of the query.</param>
        /// <param name="endYear">The value for the 'endYear' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductSellPOCO"/> entity instances.</returns>
        public EntityQuery<ProductSellPOCO> GetCountProductsSoldByYearRangeQuery(int startYear, int endYear)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("startYear", startYear);
            parameters.Add("endYear", endYear);
            this.ValidateMethod("GetCountProductsSoldByYearRangeQuery", parameters);
            return base.CreateQuery<ProductSellPOCO>("GetCountProductsSoldByYearRange", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="KlientPOCO"/> entity instances using the 'GetKlienci' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="KlientPOCO"/> entity instances.</returns>
        public EntityQuery<KlientPOCO> GetKlienciQuery()
        {
            this.ValidateMethod("GetKlienciQuery", null);
            return base.CreateQuery<KlientPOCO>("GetKlienci", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ZamowieniaKoszykPOCO"/> entity instances using the 'GetKoszykByZamowienieId' query.
        /// </summary>
        /// <param name="zamowienieID">The value for the 'zamowienieID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ZamowieniaKoszykPOCO"/> entity instances.</returns>
        public EntityQuery<ZamowieniaKoszykPOCO> GetKoszykByZamowienieIdQuery(int zamowienieID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("zamowienieID", zamowienieID);
            this.ValidateMethod("GetKoszykByZamowienieIdQuery", parameters);
            return base.CreateQuery<ZamowieniaKoszykPOCO>("GetKoszykByZamowienieId", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="KoszykPOCO"/> entity instances using the 'GetKoszyki' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="KoszykPOCO"/> entity instances.</returns>
        public EntityQuery<KoszykPOCO> GetKoszykiQuery()
        {
            this.ValidateMethod("GetKoszykiQuery", null);
            return base.CreateQuery<KoszykPOCO>("GetKoszyki", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PracownikPOCO"/> entity instances using the 'GetPracownicy' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PracownikPOCO"/> entity instances.</returns>
        public EntityQuery<PracownikPOCO> GetPracownicyQuery()
        {
            this.ValidateMethod("GetPracownicyQuery", null);
            return base.CreateQuery<PracownikPOCO>("GetPracownicy", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PracownikRodzajPOCO"/> entity instances using the 'GetPracownkRodzaje' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PracownikRodzajPOCO"/> entity instances.</returns>
        public EntityQuery<PracownikRodzajPOCO> GetPracownkRodzajeQuery()
        {
            this.ValidateMethod("GetPracownkRodzajeQuery", null);
            return base.CreateQuery<PracownikRodzajPOCO>("GetPracownkRodzaje", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PracownikStatusPOCO"/> entity instances using the 'GetPracownkStatusy' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PracownikStatusPOCO"/> entity instances.</returns>
        public EntityQuery<PracownikStatusPOCO> GetPracownkStatusyQuery()
        {
            this.ValidateMethod("GetPracownkStatusyQuery", null);
            return base.CreateQuery<PracownikStatusPOCO>("GetPracownkStatusy", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProduktProducentPOCO"/> entity instances using the 'GetProducenci' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProduktProducentPOCO"/> entity instances.</returns>
        public EntityQuery<ProduktProducentPOCO> GetProducenciQuery()
        {
            this.ValidateMethod("GetProducenciQuery", null);
            return base.CreateQuery<ProduktProducentPOCO>("GetProducenci", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductSellPOCO"/> entity instances using the 'GetProductsSoldByMonthAndYear' query.
        /// </summary>
        /// <param name="month">The value for the 'month' parameter of the query.</param>
        /// <param name="year">The value for the 'year' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductSellPOCO"/> entity instances.</returns>
        public EntityQuery<ProductSellPOCO> GetProductsSoldByMonthAndYearQuery(int month, int year)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("month", month);
            parameters.Add("year", year);
            this.ValidateMethod("GetProductsSoldByMonthAndYearQuery", parameters);
            return base.CreateQuery<ProductSellPOCO>("GetProductsSoldByMonthAndYear", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductSellPOCO"/> entity instances using the 'GetProductsSoldByYear' query.
        /// </summary>
        /// <param name="year">The value for the 'year' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductSellPOCO"/> entity instances.</returns>
        public EntityQuery<ProductSellPOCO> GetProductsSoldByYearQuery(int year)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("year", year);
            this.ValidateMethod("GetProductsSoldByYearQuery", parameters);
            return base.CreateQuery<ProductSellPOCO>("GetProductsSoldByYear", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProduktPOCO"/> entity instances using the 'GetProdukty' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProduktPOCO"/> entity instances.</returns>
        public EntityQuery<ProduktPOCO> GetProduktyQuery()
        {
            this.ValidateMethod("GetProduktyQuery", null);
            return base.CreateQuery<ProduktPOCO>("GetProdukty", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PracownikUmowaPOCO"/> entity instances using the 'GetUmowaAktualnaByPracownikId' query.
        /// </summary>
        /// <param name="pracownikID">The value for the 'pracownikID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PracownikUmowaPOCO"/> entity instances.</returns>
        public EntityQuery<PracownikUmowaPOCO> GetUmowaAktualnaByPracownikIdQuery(int pracownikID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pracownikID", pracownikID);
            this.ValidateMethod("GetUmowaAktualnaByPracownikIdQuery", parameters);
            return base.CreateQuery<PracownikUmowaPOCO>("GetUmowaAktualnaByPracownikId", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PracownikUmowaPOCO"/> entity instances using the 'GetUmowyByPracownikId' query.
        /// </summary>
        /// <param name="pracownikID">The value for the 'pracownikID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PracownikUmowaPOCO"/> entity instances.</returns>
        public EntityQuery<PracownikUmowaPOCO> GetUmowyByPracownikIdQuery(int pracownikID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pracownikID", pracownikID);
            this.ValidateMethod("GetUmowyByPracownikIdQuery", parameters);
            return base.CreateQuery<PracownikUmowaPOCO>("GetUmowyByPracownikId", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PracownikUmowaPOCO"/> entity instances using the 'GetUmowyNieaktualneByPracownikId' query.
        /// </summary>
        /// <param name="pracownikID">The value for the 'pracownikID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PracownikUmowaPOCO"/> entity instances.</returns>
        public EntityQuery<PracownikUmowaPOCO> GetUmowyNieaktualneByPracownikIdQuery(int pracownikID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pracownikID", pracownikID);
            this.ValidateMethod("GetUmowyNieaktualneByPracownikIdQuery", parameters);
            return base.CreateQuery<PracownikUmowaPOCO>("GetUmowyNieaktualneByPracownikId", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ZamowieniePOCO"/> entity instances using the 'GetZamowienia' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ZamowieniePOCO"/> entity instances.</returns>
        public EntityQuery<ZamowieniePOCO> GetZamowieniaQuery()
        {
            this.ValidateMethod("GetZamowieniaQuery", null);
            return base.CreateQuery<ZamowieniePOCO>("GetZamowienia", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ZamowieniePOCO"/> entity instances using the 'GetZamowieniaByKlientId' query.
        /// </summary>
        /// <param name="klientID">The value for the 'klientID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ZamowieniePOCO"/> entity instances.</returns>
        public EntityQuery<ZamowieniePOCO> GetZamowieniaByKlientIdQuery(int klientID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("klientID", klientID);
            this.ValidateMethod("GetZamowieniaByKlientIdQuery", parameters);
            return base.CreateQuery<ZamowieniePOCO>("GetZamowieniaByKlientId", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ZamowieniePOCO"/> entity instances using the 'GetZamowieniaByPracownikId' query.
        /// </summary>
        /// <param name="pracownikID">The value for the 'pracownikID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ZamowieniePOCO"/> entity instances.</returns>
        public EntityQuery<ZamowieniePOCO> GetZamowieniaByPracownikIdQuery(int pracownikID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pracownikID", pracownikID);
            this.ValidateMethod("GetZamowieniaByPracownikIdQuery", parameters);
            return base.CreateQuery<ZamowieniePOCO>("GetZamowieniaByPracownikId", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ZamowieniePOCO"/> entity instances using the 'GetZamowieniaNieprzydzielone' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ZamowieniePOCO"/> entity instances.</returns>
        public EntityQuery<ZamowieniePOCO> GetZamowieniaNieprzydzieloneQuery()
        {
            this.ValidateMethod("GetZamowieniaNieprzydzieloneQuery", null);
            return base.CreateQuery<ZamowieniePOCO>("GetZamowieniaNieprzydzielone", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AwesomePartsContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AwesomePartsService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAwesomePartsServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAktualneZamowienieByKlientId' operation.
            /// </summary>
            /// <param name="klientID">The value for the 'klientID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetAktualneZamowienieByKlientIdDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetAktualneZamowienieByKlientId", ReplyAction="http://tempuri.org/AwesomePartsService/GetAktualneZamowienieByKlientIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetAktualneZamowienieByKlientId(int klientID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAktualneZamowienieByKlientId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAktualneZamowienieByKlientId'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAktualneZamowienieByKlientId' operation.</returns>
            QueryResult<ZamowieniePOCO> EndGetAktualneZamowienieByKlientId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCountProductsSoldByYear' operation.
            /// </summary>
            /// <param name="year">The value for the 'year' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetCountProductsSoldByYearDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetCountProductsSoldByYear", ReplyAction="http://tempuri.org/AwesomePartsService/GetCountProductsSoldByYearResponse")]
            [WebGet()]
            IAsyncResult BeginGetCountProductsSoldByYear(int year, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCountProductsSoldByYear'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCountProductsSoldByYear'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCountProductsSoldByYear' operation.</returns>
            QueryResult<ProductSellPOCO> EndGetCountProductsSoldByYear(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCountProductsSoldByYearRange' operation.
            /// </summary>
            /// <param name="startYear">The value for the 'startYear' parameter of this action.</param>
            /// <param name="endYear">The value for the 'endYear' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetCountProductsSoldByYearRangeDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetCountProductsSoldByYearRange", ReplyAction="http://tempuri.org/AwesomePartsService/GetCountProductsSoldByYearRangeResponse")]
            [WebGet()]
            IAsyncResult BeginGetCountProductsSoldByYearRange(int startYear, int endYear, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCountProductsSoldByYearRange'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCountProductsSoldByYearRange'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCountProductsSoldByYearRange' operation.</returns>
            QueryResult<ProductSellPOCO> EndGetCountProductsSoldByYearRange(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetKlienci' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetKlienciDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetKlienci", ReplyAction="http://tempuri.org/AwesomePartsService/GetKlienciResponse")]
            [WebGet()]
            IAsyncResult BeginGetKlienci(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetKlienci'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetKlienci'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetKlienci' operation.</returns>
            QueryResult<KlientPOCO> EndGetKlienci(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetKoszykByZamowienieId' operation.
            /// </summary>
            /// <param name="zamowienieID">The value for the 'zamowienieID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetKoszykByZamowienieIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetKoszykByZamowienieId", ReplyAction="http://tempuri.org/AwesomePartsService/GetKoszykByZamowienieIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetKoszykByZamowienieId(int zamowienieID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetKoszykByZamowienieId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetKoszykByZamowienieId'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetKoszykByZamowienieId' operation.</returns>
            QueryResult<ZamowieniaKoszykPOCO> EndGetKoszykByZamowienieId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetKoszyki' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetKoszykiDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetKoszyki", ReplyAction="http://tempuri.org/AwesomePartsService/GetKoszykiResponse")]
            [WebGet()]
            IAsyncResult BeginGetKoszyki(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetKoszyki'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetKoszyki'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetKoszyki' operation.</returns>
            QueryResult<KoszykPOCO> EndGetKoszyki(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPracownicy' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetPracownicyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetPracownicy", ReplyAction="http://tempuri.org/AwesomePartsService/GetPracownicyResponse")]
            [WebGet()]
            IAsyncResult BeginGetPracownicy(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPracownicy'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPracownicy'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPracownicy' operation.</returns>
            QueryResult<PracownikPOCO> EndGetPracownicy(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPracownkRodzaje' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetPracownkRodzajeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetPracownkRodzaje", ReplyAction="http://tempuri.org/AwesomePartsService/GetPracownkRodzajeResponse")]
            [WebGet()]
            IAsyncResult BeginGetPracownkRodzaje(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPracownkRodzaje'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPracownkRodzaje'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPracownkRodzaje' operation.</returns>
            QueryResult<PracownikRodzajPOCO> EndGetPracownkRodzaje(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPracownkStatusy' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetPracownkStatusyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetPracownkStatusy", ReplyAction="http://tempuri.org/AwesomePartsService/GetPracownkStatusyResponse")]
            [WebGet()]
            IAsyncResult BeginGetPracownkStatusy(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPracownkStatusy'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPracownkStatusy'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPracownkStatusy' operation.</returns>
            QueryResult<PracownikStatusPOCO> EndGetPracownkStatusy(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProducenci' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetProducenciDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetProducenci", ReplyAction="http://tempuri.org/AwesomePartsService/GetProducenciResponse")]
            [WebGet()]
            IAsyncResult BeginGetProducenci(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProducenci'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProducenci'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProducenci' operation.</returns>
            QueryResult<ProduktProducentPOCO> EndGetProducenci(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductsSoldByMonthAndYear' operation.
            /// </summary>
            /// <param name="month">The value for the 'month' parameter of this action.</param>
            /// <param name="year">The value for the 'year' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetProductsSoldByMonthAndYearDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetProductsSoldByMonthAndYear", ReplyAction="http://tempuri.org/AwesomePartsService/GetProductsSoldByMonthAndYearResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductsSoldByMonthAndYear(int month, int year, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductsSoldByMonthAndYear'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductsSoldByMonthAndYear'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductsSoldByMonthAndYear' operation.</returns>
            QueryResult<ProductSellPOCO> EndGetProductsSoldByMonthAndYear(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductsSoldByYear' operation.
            /// </summary>
            /// <param name="year">The value for the 'year' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetProductsSoldByYearDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetProductsSoldByYear", ReplyAction="http://tempuri.org/AwesomePartsService/GetProductsSoldByYearResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductsSoldByYear(int year, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductsSoldByYear'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductsSoldByYear'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductsSoldByYear' operation.</returns>
            QueryResult<ProductSellPOCO> EndGetProductsSoldByYear(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProdukty' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetProduktyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetProdukty", ReplyAction="http://tempuri.org/AwesomePartsService/GetProduktyResponse")]
            [WebGet()]
            IAsyncResult BeginGetProdukty(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProdukty'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProdukty'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProdukty' operation.</returns>
            QueryResult<ProduktPOCO> EndGetProdukty(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUmowaAktualnaByPracownikId' operation.
            /// </summary>
            /// <param name="pracownikID">The value for the 'pracownikID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetUmowaAktualnaByPracownikIdDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetUmowaAktualnaByPracownikId", ReplyAction="http://tempuri.org/AwesomePartsService/GetUmowaAktualnaByPracownikIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetUmowaAktualnaByPracownikId(int pracownikID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUmowaAktualnaByPracownikId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUmowaAktualnaByPracownikId'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUmowaAktualnaByPracownikId' operation.</returns>
            QueryResult<PracownikUmowaPOCO> EndGetUmowaAktualnaByPracownikId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUmowyByPracownikId' operation.
            /// </summary>
            /// <param name="pracownikID">The value for the 'pracownikID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetUmowyByPracownikIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetUmowyByPracownikId", ReplyAction="http://tempuri.org/AwesomePartsService/GetUmowyByPracownikIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetUmowyByPracownikId(int pracownikID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUmowyByPracownikId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUmowyByPracownikId'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUmowyByPracownikId' operation.</returns>
            QueryResult<PracownikUmowaPOCO> EndGetUmowyByPracownikId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUmowyNieaktualneByPracownikId' operation.
            /// </summary>
            /// <param name="pracownikID">The value for the 'pracownikID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetUmowyNieaktualneByPracownikIdDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetUmowyNieaktualneByPracownikId", ReplyAction="http://tempuri.org/AwesomePartsService/GetUmowyNieaktualneByPracownikIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetUmowyNieaktualneByPracownikId(int pracownikID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUmowyNieaktualneByPracownikId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUmowyNieaktualneByPracownikId'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUmowyNieaktualneByPracownikId' operation.</returns>
            QueryResult<PracownikUmowaPOCO> EndGetUmowyNieaktualneByPracownikId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZamowienia' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetZamowieniaDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetZamowienia", ReplyAction="http://tempuri.org/AwesomePartsService/GetZamowieniaResponse")]
            [WebGet()]
            IAsyncResult BeginGetZamowienia(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZamowienia'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZamowienia'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZamowienia' operation.</returns>
            QueryResult<ZamowieniePOCO> EndGetZamowienia(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZamowieniaByKlientId' operation.
            /// </summary>
            /// <param name="klientID">The value for the 'klientID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetZamowieniaByKlientIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetZamowieniaByKlientId", ReplyAction="http://tempuri.org/AwesomePartsService/GetZamowieniaByKlientIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetZamowieniaByKlientId(int klientID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZamowieniaByKlientId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZamowieniaByKlientId'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZamowieniaByKlientId' operation.</returns>
            QueryResult<ZamowieniePOCO> EndGetZamowieniaByKlientId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZamowieniaByPracownikId' operation.
            /// </summary>
            /// <param name="pracownikID">The value for the 'pracownikID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetZamowieniaByPracownikIdDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetZamowieniaByPracownikId", ReplyAction="http://tempuri.org/AwesomePartsService/GetZamowieniaByPracownikIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetZamowieniaByPracownikId(int pracownikID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZamowieniaByPracownikId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZamowieniaByPracownikId'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZamowieniaByPracownikId' operation.</returns>
            QueryResult<ZamowieniePOCO> EndGetZamowieniaByPracownikId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZamowieniaNieprzydzielone' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/GetZamowieniaNieprzydzieloneDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/GetZamowieniaNieprzydzielone", ReplyAction="http://tempuri.org/AwesomePartsService/GetZamowieniaNieprzydzieloneResponse")]
            [WebGet()]
            IAsyncResult BeginGetZamowieniaNieprzydzielone(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZamowieniaNieprzydzielone'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZamowieniaNieprzydzielone'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZamowieniaNieprzydzielone' operation.</returns>
            QueryResult<ZamowieniePOCO> EndGetZamowieniaNieprzydzielone(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AwesomePartsService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AwesomePartsService/SubmitChanges", ReplyAction="http://tempuri.org/AwesomePartsService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AwesomePartsContextEntityContainer : EntityContainer
        {
            
            public AwesomePartsContextEntityContainer()
            {
                this.CreateEntitySet<KlientPOCO>(EntitySetOperations.None);
                this.CreateEntitySet<KoszykPOCO>(EntitySetOperations.None);
                this.CreateEntitySet<ProductSellPOCO>(EntitySetOperations.None);
                this.CreateEntitySet<PracownikPOCO>((EntitySetOperations.Add | EntitySetOperations.Edit));
                this.CreateEntitySet<PracownikRodzajPOCO>(EntitySetOperations.None);
                this.CreateEntitySet<PracownikStatusPOCO>(EntitySetOperations.None);
                this.CreateEntitySet<PracownikUmowaPOCO>((EntitySetOperations.Add | EntitySetOperations.Edit));
                this.CreateEntitySet<ProduktPOCO>(EntitySetOperations.All);
                this.CreateEntitySet<ProduktProducentPOCO>(EntitySetOperations.None);
                this.CreateEntitySet<ZamowieniaKoszykPOCO>(EntitySetOperations.Add);
                this.CreateEntitySet<ZamowieniePOCO>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ProfileService' DomainService.
    /// </summary>
    public sealed partial class ProfileContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileContext"/> class.
        /// </summary>
        public ProfileContext() : 
                this(new WebDomainClient<IProfileServiceContract>(new Uri("AwesomeParts-Web-Services-ProfileService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ProfileService service URI.</param>
        public ProfileContext(Uri serviceUri) : 
                this(new WebDomainClient<IProfileServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ProfileContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProfileData"/> entity instances that have been loaded into this <see cref="ProfileContext"/> instance.
        /// </summary>
        public EntitySet<ProfileData> ProfileDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProfileData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProfileData"/> entity instances using the 'GetProfile' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProfileData"/> entity instances.</returns>
        public EntityQuery<ProfileData> GetProfileQuery()
        {
            this.ValidateMethod("GetProfileQuery", null);
            return base.CreateQuery<ProfileData>("GetProfile", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProfileData"/> entity instances using the 'GetUserByUserName' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProfileData"/> entity instances.</returns>
        public EntityQuery<ProfileData> GetUserByUserNameQuery(string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("GetUserByUserNameQuery", parameters);
            return base.CreateQuery<ProfileData>("GetUserByUserName", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProfileData"/> entity instances using the 'GetUserIdByUserName' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProfileData"/> entity instances.</returns>
        public EntityQuery<ProfileData> GetUserIdByUserNameQuery(string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("GetUserIdByUserNameQuery", parameters);
            return base.CreateQuery<ProfileData>("GetUserIdByUserName", parameters, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateUserData' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation UpdateUserData(ProfileData user, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            this.ValidateMethod("UpdateUserData", parameters);
            return this.InvokeOperation("UpdateUserData", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateUserData' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation UpdateUserData(ProfileData user)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            this.ValidateMethod("UpdateUserData", parameters);
            return this.InvokeOperation("UpdateUserData", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ProfileContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ProfileService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IProfileServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetProfile' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProfileService/GetProfileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProfileService/GetProfile", ReplyAction="http://tempuri.org/ProfileService/GetProfileResponse")]
            [WebGet()]
            IAsyncResult BeginGetProfile(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProfile'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProfile'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProfile' operation.</returns>
            QueryResult<ProfileData> EndGetProfile(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserByUserName' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProfileService/GetUserByUserNameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProfileService/GetUserByUserName", ReplyAction="http://tempuri.org/ProfileService/GetUserByUserNameResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserByUserName(string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserByUserName'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserByUserName'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserByUserName' operation.</returns>
            QueryResult<ProfileData> EndGetUserByUserName(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserIdByUserName' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProfileService/GetUserIdByUserNameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProfileService/GetUserIdByUserName", ReplyAction="http://tempuri.org/ProfileService/GetUserIdByUserNameResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserIdByUserName(string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserIdByUserName'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserIdByUserName'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserIdByUserName' operation.</returns>
            QueryResult<ProfileData> EndGetUserIdByUserName(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateUserData' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProfileService/UpdateUserDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProfileService/UpdateUserData", ReplyAction="http://tempuri.org/ProfileService/UpdateUserDataResponse")]
            IAsyncResult BeginUpdateUserData(ProfileData user, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateUserData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateUserData'.</param>
            void EndUpdateUserData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProfileService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProfileService/SubmitChanges", ReplyAction="http://tempuri.org/ProfileService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ProfileContextEntityContainer : EntityContainer
        {
            
            public ProfileContextEntityContainer()
            {
                this.CreateEntitySet<ProfileData>(EntitySetOperations.Edit);
            }
        }
    }
}
